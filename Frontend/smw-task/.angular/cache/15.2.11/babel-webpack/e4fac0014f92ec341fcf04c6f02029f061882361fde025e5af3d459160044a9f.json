{"ast":null,"code":"export class TreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\nexport class BinarySearchTree {\n  constructor() {\n    this.root = null;\n  }\n  insert(value) {\n    const newNode = new TreeNode(value);\n    if (!this.root) {\n      this.root = newNode;\n    } else {\n      this.insertNode(this.root, newNode);\n    }\n  }\n  insertNode(node, newNode) {\n    if (newNode.value < node.value) {\n      if (!node.left) {\n        node.left = newNode;\n      } else {\n        this.insertNode(node.left, newNode);\n      }\n    } else {\n      if (!node.right) {\n        node.right = newNode;\n      } else {\n        this.insertNode(node.right, newNode);\n      }\n    }\n  }\n  getMin() {\n    if (!this.root) return null;\n    let current = this.root;\n    while (current.left) {\n      current = current.left;\n    }\n    return current.value;\n  }\n  getMax() {\n    if (!this.root) return null;\n    let current = this.root;\n    while (current.right) {\n      current = current.right;\n    }\n    return current.value;\n  }\n}","map":{"version":3,"mappings":"AAAA,OAAM,MAAOA,QAAQ;EAKjBC,YAAYC,KAAa;IACrB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,KAAK,GAAG,IAAI;EACrB;;AAGJ,OAAM,MAAOC,gBAAgB;EAGzBJ;IACI,IAAI,CAACK,IAAI,GAAG,IAAI;EACpB;EAEAC,MAAM,CAACL,KAAa;IAChB,MAAMM,OAAO,GAAG,IAAIR,QAAQ,CAACE,KAAK,CAAC;IACnC,IAAI,CAAC,IAAI,CAACI,IAAI,EAAE;MACZ,IAAI,CAACA,IAAI,GAAGE,OAAO;KACtB,MAAM;MACH,IAAI,CAACC,UAAU,CAAC,IAAI,CAACH,IAAI,EAAEE,OAAO,CAAC;;EAE3C;EAEQC,UAAU,CAACC,IAAc,EAAEF,OAAiB;IAChD,IAAIA,OAAO,CAACN,KAAK,GAAGQ,IAAI,CAACR,KAAK,EAAE;MAC5B,IAAI,CAACQ,IAAI,CAACP,IAAI,EAAE;QACZO,IAAI,CAACP,IAAI,GAAGK,OAAO;OACtB,MAAM;QACH,IAAI,CAACC,UAAU,CAACC,IAAI,CAACP,IAAI,EAAEK,OAAO,CAAC;;KAE1C,MAAM;MACH,IAAI,CAACE,IAAI,CAACN,KAAK,EAAE;QACbM,IAAI,CAACN,KAAK,GAAGI,OAAO;OACvB,MAAM;QACH,IAAI,CAACC,UAAU,CAACC,IAAI,CAACN,KAAK,EAAEI,OAAO,CAAC;;;EAGhD;EAEAG,MAAM;IACF,IAAI,CAAC,IAAI,CAACL,IAAI,EAAE,OAAO,IAAI;IAC3B,IAAIM,OAAO,GAAG,IAAI,CAACN,IAAI;IACvB,OAAOM,OAAO,CAACT,IAAI,EAAE;MACjBS,OAAO,GAAGA,OAAO,CAACT,IAAI;;IAE1B,OAAOS,OAAO,CAACV,KAAK;EACxB;EAEAW,MAAM;IACF,IAAI,CAAC,IAAI,CAACP,IAAI,EAAE,OAAO,IAAI;IAC3B,IAAIM,OAAO,GAAG,IAAI,CAACN,IAAI;IACvB,OAAOM,OAAO,CAACR,KAAK,EAAE;MAClBQ,OAAO,GAAGA,OAAO,CAACR,KAAK;;IAE3B,OAAOQ,OAAO,CAACV,KAAK;EACxB","names":["TreeNode","constructor","value","left","right","BinarySearchTree","root","insert","newNode","insertNode","node","getMin","current","getMax"],"sourceRoot":"","sources":["C:\\Users\\DELL\\Desktop\\SWM-Test-Ali\\SMW-test-MTA\\Frontend\\smw-task\\src\\binary-search-tree.ts"],"sourcesContent":["export class TreeNode {\r\n    value: number;\r\n    left: TreeNode | null;\r\n    right: TreeNode | null;\r\n\r\n    constructor(value: number) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nexport class BinarySearchTree {\r\n    root: TreeNode | null;\r\n\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    insert(value: number) {\r\n        const newNode = new TreeNode(value);\r\n        if (!this.root) {\r\n            this.root = newNode;\r\n        } else {\r\n            this.insertNode(this.root, newNode);\r\n        }\r\n    }\r\n\r\n    private insertNode(node: TreeNode, newNode: TreeNode) {\r\n        if (newNode.value < node.value) {\r\n            if (!node.left) {\r\n                node.left = newNode;\r\n            } else {\r\n                this.insertNode(node.left, newNode);\r\n            }\r\n        } else {\r\n            if (!node.right) {\r\n                node.right = newNode;\r\n            } else {\r\n                this.insertNode(node.right, newNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    getMin(): number | null {\r\n        if (!this.root) return null;\r\n        let current = this.root;\r\n        while (current.left) {\r\n            current = current.left;\r\n        }\r\n        return current.value;\r\n    }\r\n\r\n    getMax(): number | null {\r\n        if (!this.root) return null;\r\n        let current = this.root;\r\n        while (current.right) {\r\n            current = current.right;\r\n        }\r\n        return current.value;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}